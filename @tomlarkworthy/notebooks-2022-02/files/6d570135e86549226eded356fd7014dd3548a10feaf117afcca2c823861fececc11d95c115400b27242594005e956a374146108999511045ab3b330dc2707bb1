[{"title":"Shorthand / Observable Plot","description":"We designed Observable Plot’s API to be succinct so that when you want to visualize data, you can do it quickly and without struggling to remember Plot’s API. This notebook showcases Plot’s “shorthand” syntax where no options are specified—only data. To use this shorthand, the data must have a specific structure: either a one-dimensional array of values v₀, v₁, v₂, … or a two-dimensional array of tuples [x₀, y₀, x₁, y₁, x₂, y₂, …]. Let’s start with the one-dimensional form: an array of numbers. These number"},{"title":"Hex grid emoji map","description":"A tool for making hex maps by using emoji for landmarks"},{"title":"Minimap","description":"The Minimap lists the cells in a notebook and their dependencies. Click a cell to jump to it; the Minimap then shows connections to cells it depends on, and cells that depend on it. Following the line from left to right, you see the order in which data flows through your notebook, and the order in which cells will run. To open the Minimap, click   in the right sidebar, or View → Show minimap in the notebook menu. See for yourself by looking at these three cells in the Minimap (click  ): Try focusing each ce"},{"title":"HTML+CSS Periodic Three-Body Orbits","description":"This notebook reworks my Periodic Planar Three-Body Orbits notebook with a bit of an odd goal: to animate periodic planar three-body orbits using pure HTML and CSS, without any JavaScript, and without fully enumerating every point along the paths. The method is straightforward though a bit tedious. We integrate an orbit with fixed temporal spacing, assign the x and y components of each point along the trajectory to real and imaginary components in the complex plane, and compute the Discrete Fourier Transfor"},{"title":"HTML+CSS Periodic Three-Body Orbits","description":"This notebook reworks my Periodic Planar Three-Body Orbits notebook with a bit of an odd goal: to animate periodic planar three-body orbits using pure HTML and CSS, without any JavaScript, and without fully enumerating every point along the paths. The method is straightforward though a bit tedious. We integrate an orbit with fixed temporal spacing, assign the x and y components of each point along the trajectory to real and imaginary components in the complex plane, and compute the Discrete Fourier Transfor"},{"title":"Polygon Collisions","description":"Use the separating axis theorem to test for collisions between convex polygons. See here and here for helpful diagrams and explanations of this technique. As you drag the randomly generated polygons below (using their centroid dot), the thick lines show their shadow projections onto the normals of each polygon edge. The polygons overlap when all of these shadow overlap. The dashed outline shows a displaced copy of one polygon that just brings their shadows into contact along the edge normal where they have"},{"title":"US Energy Production","description":"Author: David Pan Class Data Source - US Energy Information Administration This is a temporal dataset with categorical features (energy source) Note: Originally I wanted to view these on a worldwide scale, but since I was unable to find an appropriately reliable data source I have limited my scale to just inside the US for now. Also the API is available here but requires a key so I am just uploading the file to avoid sharing it. Example Insights: Like many others, I am concerned about climate change and the"},null,{"title":"Instead of more colors, try an input to highlight your bar chart","description":"How many times have you created a chart that looks like this? A chart that has some category and some metric, and a lot of colored bars (one for each category). We use colors expecting that they will help us to distinguish between categories. But, there are too many categories and not enough colors. In this chart we happen to be looking at some e-commerce data that Google has provided about the branded tee-shirts, socks, hoodies, water bottles and more sold in their online store over a couple of months one"},{"title":"Visualization Valentine with Vega-Lite API","description":"We want to draw a pulsing ❤️ and do some creative coding. In this example, we use Vega-Lite-API, a library designed for interactive data visualization and not really to draw hearts but it's a fun exercise so why not? We get the data to draw the heart from two functions. These functions are defined in the range of -2, 2. Draw the heart with a scatterplot. Clean up the chart Drawing a line chart We can just switch from point to line. However, since Vega-Lite is made for drawing data visualizations, the line f"},{"title":"Hello, pintora","description":"Pintora is a text to diagrams library. Documentation here"},{"title":"Create a ggplot style legend using Plot","description":"This is how the generated legend looks like: Since plotLegend uses Plot Marks to generate individual legend items, the legend data items accept Scale options. Following options are supported: type – Optional. Possible values: dot, image stroke fill text strokeDasharray symbol Sample legend data items: To include in your Observable botebook:\n\\`\\`\\`js\nimport {plotLegend} from \"@iashishsingh/plot-legend\"\n\\`\\`\\`\nSuggestions are welcome! Credit: Thanks to Philippe Rivière for suggesting that Plot can also be use"},{"title":"Words Known Better by Males than Females, and Vice Versa","description":"The chart below visualizes words disproportionately known by one sex and not the other. The data comes from this table in a paper on Word prevalence norms for 62,000 English lemmas (via): In the dataset we selected, each word was judged on average by 388 participants (282 from the USA and 106 from the UK). The percentages of people indicating they knew the word ranged from 2% (for stotinka, adyta, kahikatea, gomuti, arseniuret, alsike, . . .) to 100% (. . . , you, young, yourself, zone, zoned). See also: Wo"},{"title":"Automatically Backup Observable notebooks to Github","description":"Take control of your data and relax. Backup your public and team Observable notebooks to a Github repository automatically when published.\nBy using a combination of on version hook which executes after a notebook is published, and repository dispatch which starts a Github Action workflow, we can automatically export and unpack notebook source code to a Github repository every change. The setup is a two step process. In the notebooks, import and call `enableGithubBackups({ owner, repo })` In the Github repos"},{"title":"findTriangle() for D3.Delaunay and Delaunator","description":"Finds the enclosing triangle for an arbitrary point (x,y) in a `d3-delaunay` or  `delaunator` triangulation. Instructions: Performance: Comparisons made by Fil suggest that `findTriangle()` is about twice as fast as `delaunay.find()`. For an earlier implementation of a similar algorithm see Delaunay.findTriangle by Fil. Move the mouse over the chart to set a different target point. Visited half-edges are shown as black lines. Implementation The algorithm is a simple walk over the triangulation's half-edges."},{"title":"100+ Command Line Tools for Data Visualization","description":"Prepared for my talk at 2022 Outlier, but should be useful for all! While these tools may not all work with data viz directly, they would help with your data visualization process. This may include: Data cleaning/wrangling Exploring a dataset Sending/sharing data with others Translating/converting a dataset into different filetypes Making the terminal not unbearable Feel free to send suggestions and comments to add new tools and categories! GOAT tools Greatest of all time CLI tools for data viz! pbcopy, pbp"},{"title":"Circular Sankey Diagram","description":"using Sankey Plus Step 1: Define your data here Step 2: Define process Step 3: create Sankey with data converter Step 4: Adjust configuration Step 5: create empty div + create new instance of Sankey Dependencies Very helpful when importing module fails https://observablehq.com/@observablehq/module-require-debugger"},{"title":"Ilots de chaleur, la marque d’une injustice climatique","description":"Aux États-Unis, une littérature abondante a démontré le lien entre inégalités sociales et inégalités climatiques : les quartiers les plus pauvres des grandes métropoles américaines sont aussi les quartiers où l’effet d’ilot de chaleur est le plus important. Qu’en est-il en France ? Ce notebook est également publié sur le site visionscarto. En croisant les données de température de surface provenant de l’imagerie Landsat&nbsp;8 et les données FiLoSoFi de l’INSEE sur les revenus des ménages, nous avons essayé"},{"title":"Transparent Color Widget","description":"A color widget that supports opacity, built on top of Observable Inputs. Example Common Inputs properties are supported: `min`, `max` and `step` can be specified: A validate callback can be specified. It receives a proxy text input as argument:"},{"title":"044 Fifteen silly ways to draw a line","description":"Inspired by Manohar Vanga’s ‘Fifteen Ways to Draw a Line’ my experiments with drawing lines. My constraint is to implement different functions with following declaration: Code Line Functions The default line Zigzag Squiggle Brush stroke Based on Oil painting brushstrokes by Alan Kang Circles Squares Dots Uses Poisson-disc sampling to place the dots. Triangles Dashed line Isometric box Possible histories Parabolic curves 10 PRINT Sunburst More lines Utility Functions Imports"}]